const pathSelect = (rings) => {
   let p = ""
   switch (rings) {
      case 1:
         p = "M754.946,395.027c0,195.091-158.152,353.243-353.243,353.243 c-195.091,0-353.244-158.152-353.244-353.243c0-195.091,158.152-353.244,353.244-353 244 C596.794,41.784,754.946,199.936,754.946,395.027z"
         break;
      case 2:
         p = "M774.405,398.811c0,204.644-165.896,370.541-370.54,370.541 c-204.645,0-370.541-165.896-370.541-370.541S199.221,28.271,403.865,28.271C608.509,28.271,774.405,194.167,774.405,398.811z M395.648,162.297c-133.892,0-242.433,108.541-242.433,242.432s108.541,242.433,242.433,242.433 c133.892,0,242.432-108.541,242.432-242.433S529.54,162.297,395.648,162.2 "
         break;
      case 3:
         p = "M764,400.5C764,601.808,600.809,765,399.5,765 C198.193,765,35,601.808,35,400.5S198.193,36,399.5,36C600.809,36,764,199.192,764,400.5z M399,103c-164.028,0-297,132.972-297,297 s132.971,297,297,297c164.029,0,297-132.972,297-297S563.029,103,399,103z M399,166c-129.234,0-234,104.766-234,234 s104.766,234,234,234c129.234,0,234-104.766,234-234S528.234,166,399,166z"
         break;
      case 4:
         p = "M764,400.5C764,601.808,600.809,765,399.5,765 C198.193,765,35,601.808,35,400.5S198.193,36,399.5,36C600.809,36,764,199.192,764,400.5z M399,103c-164.028,0-297,132.972-297,297 s132.971,297,297,297c164.029,0,297-132.972,297-297S563.029,103,399,103z M399,166c-129.234,0-234,104.766-234,234 s104.766,234,234,234c129.234,0,234-104.766,234-234S528.234,166,399,166z"
      default:
         p = "M417.149,262.524c31.365,0.769,61.926,12.434,85.777,32.827 c23.503,20.096,39.789,48.003,45.594,78.387c5.937,31.072,1.001,64.271-12.198,92.939c-12.836,27.882-33.755,51.804-59.638,68.295 c-26.721,17.025-58.263,25.718-89.927,24.952c-31.482-0.761-62.387-10.923-88.145-29.046 c-25.123-17.677-44.944-42.549-56.476-71.026c-12.083-29.838-14.184-62.027-8.437-93.414c5.589-30.522,19.075-59.395,38.84-83.31 c19.541-23.644,45.003-42.227,73.518-53.544c29.798-11.827,62.62-15.555,94.334-10.939c30.805,4.483,60.237,16.952,84.908,35.932 c24.286,18.684,43.731,43.454,56.049,71.515c12.874,29.329,17.404,61.446,14.415,93.209c-2.939,31.242-13.11,61.655-29.571,88.372 c-16.064,26.074-37.959,48.459-63.667,65.103c-26.275,17.01-56.367,27.86-87.453,31.521c-31.9,3.756-64.604,0.059-94.799-10.919 c-28.922-10.516-55.334-27.604-76.849-49.601c-21.539-22.021-38.048-48.839-47.909-78.026 c-10.322-30.552-12.757-62.534-8.865-94.266c3.813-31.081,14.075-61.269,30.018-88.221c15.569-26.32,36.442-49.432,61.031-67.611 c24.921-18.425,53.564-31.684,83.752-38.711c31.441-7.319,64.44-7.917,96.132-1.783c30.53,5.909,59.74,18.133,85.395,35.704 c25.223,17.275,46.908,39.617,63.417,65.349c16.842,26.25,28.187,55.914,33.149,86.706c5.109,31.697,3.455,64.474-4.014,95.688 c-7.215,30.159-20.091,58.894-37.749,84.382c-17.408,25.127-39.396,47.034-64.588,64.351 c-25.562,17.569-54.354,30.34-84.55,37.443c-31.44,7.396-64.31,8.667-96.237,3.801c-30.895-4.708-60.828-15.244-87.863-30.919 c-26.462-15.343-50.064-35.53-69.349-59.271c-19.439-23.932-34.431-51.419-43.955-80.745 c-9.915-30.531-13.429-62.419-11.592-94.112c1.831-31.595,9.123-62.822,21.573-91.923c12.066-28.205,28.912-54.321,49.589-76.98 c20.611-22.586,44.989-41.698,71.861-56.29c27.476-14.92,57.49-25.052,88.385-29.852c31.973-4.968,64.84-4.304,96.58,1.996 c30.535,6.061,59.975,17.38,86.709,33.328c26.239,15.652,49.815,35.706,69.493,59.077c19.798,23.513,35.608,50.343,46.532,79.077 c11.319,29.776,17.321,61.485,17.824,93.33c0.503,31.815-4.19,63.924-13.798,94.321c-9.313,29.464-23.279,57.42-41.203,82.588 c-17.731,24.898-39.301,47.037-63.726,65.414c-24.646,18.544-52.171,33.224-81.32,43.311 c-30.195,10.449-62.045,15.917-93.989,16.28c-32.062,0.364-64.146-4.392-94.678-14.203c-29.409-9.451-57.29-23.545-82.367-41.579 c-24.815-17.847-46.854-39.518-65.119-64.027c-18.436-24.739-32.99-52.341-42.942-81.546 c-10.164-29.829-16.535-62.516-15.837-94.139c0.696-31.544,4.423-63.357,13.571-94.001c8.849-29.645,22.048-57.962,39.034-83.817 c16.772-25.531,37.206-48.634,60.486-68.411c23.393-19.872,49.638-36.362,77.711-48.776 c28.792-12.732,59.455-21.138,90.708-24.914c32.206-3.891,65.016-2.94,96.933,2.871c30.751,5.599,60.646,15.744,88.449,30.025 c27.24,13.991,52.435,31.918,74.605,53.041c22.14,21.092,41.243,45.349,56.534,71.83c15.55,26.928,27.124,56.121,34.236,86.392 c7.38,31.409,9.807,63.749,7.77,95.882c-2.011,31.723-8.42,63.144-19.071,93.095c-10.342,29.083-24.654,56.731-42.396,81.989 c-17.572,25.016-38.487,47.667-62.019,67.181c-23.65,19.613-49.929,36.039-77.938,48.671 c-28.648,12.919-59.07,21.84-90.155,26.457c-32.144,4.774-64.978,4.998-97.185,0.673c-31.199-4.188-61.795-12.699-90.665-25.249 c-28.196-12.257-54.71-28.339-78.634-47.647c-23.787-19.197-44.998-41.567-62.9-66.344 c-18.061-24.996-32.733-52.424-43.464-81.337c-11.038-29.739-17.874-61.002-20.325-92.627c-0.695-8.969-1.041-17.964-1.041-26.959"
   }
   return p;
}

export const textCurve = (node, index, rings) => {
   let ringsPath = pathSelect(rings);
   let url = "http://www.w3.org/2000/svg";
   let newSvg = document.createElementNS(url, "svg");
   let newPath = document.createElementNS(url, "path");
   let newText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
   let newTextPath = document.createElementNS(url, "textPath");
   newSvg.setAttribute("viewBox", "0 0 800 800");
   newPath.id = `${node.tagName}-${index}`
   newPath.setAttribute("d", ringsPath);
   newPath.setAttribute("stroke", "none");
   newPath.setAttribute("fill", "none");
   newTextPath.setAttribute("href", `#${newPath.id}`);
   newTextPath.innerHTML = node.innerHTML;
   newText.append(newTextPath);
   newSvg.append(newPath);
   newSvg.append(newText);
   node.innerHTML = '';
   node.append(newSvg);
}

export const pCurve = (node, index) => {
   
}